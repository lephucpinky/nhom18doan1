{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Documents\\\\doan\\\\admin-dashboard\\\\src\\\\PrivateRouter.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Login from './screens/LoginScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = Component => {\n  var _s = $RefreshSig$();\n  const Auth = props => {\n    _s();\n    const {\n      isLoggedIn\n    } = useSelector(state => state.user);\n    // Login data added to props via redux-store (or use react context for example)\n    // If user is not logged in, return login componentc\n    if (!isLoggedIn) {\n      return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 16\n      }, this);\n    }\n    // If user is logged in, return original component\n    return /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Copy getInitial props so it will run as well\n  _s(Auth, \"877P/f/MnA4yuj3K53yr4WjuRPQ=\", false, function () {\n    return [useSelector];\n  });\n  if (Component.getInitialProps) {\n    Auth.getInitialProps = Component.getInitialProps;\n  }\n  return Auth;\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useSelector","Login","jsxDEV","_jsxDEV","PrivateRoute","Component","_s","$RefreshSig$","Auth","props","isLoggedIn","state","user","fileName","_jsxFileName","lineNumber","columnNumber","getInitialProps","_c","$RefreshReg$"],"sources":["C:/Users/Public/Documents/doan/admin-dashboard/src/PrivateRouter.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport Login from './screens/LoginScreen';\r\n\r\nconst PrivateRoute = (Component) => {\r\nconst Auth = (props) => {\r\n    const { isLoggedIn } = useSelector((state) => state.user);\r\n    // Login data added to props via redux-store (or use react context for example)\r\n    // If user is not logged in, return login componentc\r\n    if (!isLoggedIn) {\r\n        return <Login />;\r\n    }\r\n    // If user is logged in, return original component\r\n    return <Component {...props} />;\r\n};\r\n\r\n// Copy getInitial props so it will run as well\r\nif (Component.getInitialProps) {\r\n    Auth.getInitialProps = Component.getInitialProps;\r\n}\r\n\r\nreturn Auth;\r\n};\r\n\r\nexport default PrivateRoute;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,YAAY,GAAIC,SAAS,IAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACpC,MAAMC,IAAI,GAAIC,KAAK,IAAK;IAAAH,EAAA;IACpB,MAAM;MAAEI;IAAW,CAAC,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;IACzD;IACA;IACA,IAAI,CAACF,UAAU,EAAE;MACb,oBAAOP,OAAA,CAACF,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpB;IACA;IACA,oBAAOb,OAAA,CAACE,SAAS;MAAA,GAAKI;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC,CAAC;;EAED;EAAAV,EAAA,CAXME,IAAI;IAAA,QACiBR,WAAW;EAAA;EAWtC,IAAIK,SAAS,CAACY,eAAe,EAAE;IAC3BT,IAAI,CAACS,eAAe,GAAGZ,SAAS,CAACY,eAAe;EACpD;EAEA,OAAOT,IAAI;AACX,CAAC;AAACU,EAAA,GAlBId,YAAY;AAoBlB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}